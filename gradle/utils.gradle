/*
 * This file is a part of nu-art projects development tools,
 * it has a set of bash and gradle scripts, and the default
 * settings for Android Studio and IntelliJ.
 *
 * Copyright (C) 2017  Adam van der Kruk aka TacB0sS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def addJavadocTask() {
    android.libraryVariants.all { variant ->
        task("generate${variant.name}Javadoc", type: Javadoc) {
            title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
            description "Generates Javadoc for $variant.name."

            destinationDir = new File("${project.getProjectDir()}/build/doc/compiled/", variant.baseName)
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())

            options {
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
        }

        task("package${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name}Javadoc") {
            description "Bundles Javadoc into zip for $variant.name."
            classifier = "javadoc"
            destinationDir = new File("${project.getProjectDir()}/build/doc/")
            from tasks["generate${variant.name}Javadoc"]
        }
    }

}

Object resolveDependency(String artifactId, String groupId, String version) {
    return new File("${artifactId}", "build.gradle").exists() ? project(":${artifactId}") : "${groupId}:${artifactId}:${version}"
}

void includeIfExists(String artifactId) {
    if (new File("${artifactId}", "build.gradle").exists())
        include ":${artifactId}"
}

void defineVariantsAAR() {
    defineVariantsAAR({ variant -> "${archivesBaseName}-v${version}.aar" })
}

@SuppressWarnings("GrMethodMayBeStatic")
void defineVariantsAAR(Closure nameBuild) {
    android.libraryVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File((String) output.outputFile.parent, nameBuild(variant))
        }
    }
}

void defineDefaultVariantsAPK(String appName) {
    defineVariantsAPK({ variant, output ->
        def versionName = variant.versionName
        def versionCode = "-(${variant.versionCode})"
        def buildLetter = variant.buildType.name == "release" ? "-R" : "-D"
        def flavor = variant.productFlavors.size() > 0 ? "-${variant.productFlavors[0].name}" : ""
        def architecture = "-arch"// + output.getFilter(OutputFile.ABI)

        "v${versionName}${versionCode}${buildLetter}${flavor}${architecture}--${appName}.apk"
    })
}

void defineVariantsAPK(Closure nameBuild) {
    android {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.outputFile = new File((String) output.outputFile.parent, nameBuild(variant, output))
                output.packageApplication.outputFile = output.outputFile
            }
        }
    }
}

ext {
    defineDefaultVariantsAPK = this.&defineDefaultVariantsAPK
    addJavadocTask = this.&addJavadocTask
    defineVariantsAPK = this.&defineVariantsAPK
    defineVariantsAAR = this.&defineVariantsAAR
    resolveDependency = this.&resolveDependency
    includeIfExists = this.&includeIfExists
}
