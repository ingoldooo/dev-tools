/*
 * Permissions management system, define access level for each of
 * your server apis, and restrict users by giving them access levels
 *
 * Copyright (C) 2020 Adam van der Kruk aka TacB0sS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def applyAndroidApplication(id, apkName) {

	apply plugin: 'com.android.application'

	project.android {
		defaultConfig {
			applicationId id
		}

		def rootProjectPath = rootProject.projectDir.getAbsolutePath()

		compileSdkVersion COMPILE_SDK.toInteger()
		buildToolsVersion TOOLS_VERSION

		defaultConfig {
			multiDexEnabled true

			minSdkVersion MIN_SDK
			targetSdkVersion TARGET_SDK
			versionName getVersionNameFromFile()
			versionCode getVersionCodeFromFile()
			project.version = versionName

			testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		}

		lintOptions {
			checkReleaseBuilds false
			abortOnError false
		}

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}

		signingConfigs {
			debug {
				storeFile file(rootProjectPath + "/debug.keystore")
			}
		}

		buildTypes {
			debug {
				signingConfig signingConfigs.debug
			}
		}

		defineDefaultVariantsAPK(apkName)
	}
}

def applyAndroidXApplication(id, apkName) {

	apply plugin: 'com.android.application'

	project.android {
		defaultConfig {
			applicationId id
		}

		def rootProjectPath = rootProject.projectDir.getAbsolutePath()

		compileSdkVersion COMPILE_SDK.toInteger()
		buildToolsVersion TOOLS_VERSION

		defaultConfig {
			multiDexEnabled true

			minSdkVersion MIN_SDK
			targetSdkVersion TARGET_SDK
			versionName getVersionNameFromFile()
			versionCode getVersionCodeFromFile()
			project.version = versionName

			testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		}

		lintOptions {
			checkReleaseBuilds false
			abortOnError false
		}

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}

		signingConfigs {
			debug {
				storeFile file(rootProjectPath + "/debug.keystore")
			}
		}

		buildTypes {
			debug {
				signingConfig signingConfigs.debug
			}
		}

		defineDefaultVariantsAPK(apkName)
	}
}

def applyAndroidLibrary() {
	apply plugin: 'com.android.library'

	android {
		def rootProjectPath = rootProject.projectDir.getAbsolutePath()
		apply from: rootProjectPath + '/dev-tools/gradle/utils.gradle'

		compileSdkVersion COMPILE_SDK.toInteger()
		if (!checkMinGradleVersion("4.4"))
			buildToolsVersion TOOLS_VERSION

		lintOptions {
			abortOnError false
		}

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}

		defaultConfig {
			minSdkVersion MIN_SDK
			targetSdkVersion TARGET_SDK
			versionName getVersionNameFromFile()
			project.version = versionName
			testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

			javaCompileOptions {
				annotationProcessorOptions {
					includeCompileClasspath false
				}
			}
		}

		buildTypes {
			release {
				signingConfig null
			}
		}

		defineVariantsAAR()
	}
}

def applyJavaLibrary() {
	apply plugin: 'java-library'

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}
}

ext {
	applyAndroidXApplication = this.&applyAndroidXApplication
	applyAndroidApplication = this.&applyAndroidApplication
	applyAndroidLibrary = this.&applyAndroidLibrary
	applyJavaLibrary = this.&applyJavaLibrary
}